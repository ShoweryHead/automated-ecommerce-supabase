const mongoose = require('mongoose');

const BlogPostSchema = new mongoose.Schema({
  // Basic information
  title: {
    type: String,
    required: [true, 'Blog post title is required'],
    trim: true,
    maxlength: [200, 'Title cannot be more than 200 characters']
  },
  slug: {
    type: String,
    required: [true, 'Slug is required'],
    unique: true,
    trim: true,
    lowercase: true
  },
  content: {
    type: String,
    required: [true, 'Content is required']
  },
  excerpt: {
    type: String,
    required: [true, 'Excerpt is required'],
    maxlength: [500, 'Excerpt cannot be more than 500 characters']
  },
  
  // Content type
  contentType: {
    type: String,
    enum: ['product', 'industry_news', 'how_to', 'case_study'],
    required: [true, 'Content type is required']
  },
  
  // Featured image
  featuredImage: {
    url: {
      type: String,
      required: [true, 'Featured image URL is required']
    },
    alt: {
      type: String,
      required: [true, 'Image alt text is required']
    },
    caption: String
  },
  
  // Additional images
  images: [{
    url: {
      type: String,
      required: true
    },
    alt: {
      type: String,
      required: true
    },
    caption: String
  }],
  
  // Categories and tags
  categories: [{
    type: mongoose.Schema.ObjectId,
    ref: 'Category'
  }],
  tags: [{
    type: String,
    trim: true
  }],
  
  // Related products
  relatedProducts: [{
    type: mongoose.Schema.ObjectId,
    ref: 'Product'
  }],
  
  // SEO fields
  seo: {
    metaTitle: {
      type: String,
      trim: true,
      maxlength: [70, 'Meta title cannot be more than 70 characters']
    },
    metaDescription: {
      type: String,
      trim: true,
      maxlength: [160, 'Meta description cannot be more than 160 characters']
    },
    focusKeyword: {
      type: String,
      trim: true
    },
    longTailKeywords: [{
      type: String,
      trim: true
    }],
    canonicalUrl: {
      type: String,
      trim: true
    },
    structuredData: {
      type: Object,
      default: {}
    }
  },
  
  // Publishing information
  status: {
    type: String,
    enum: ['draft', 'review', 'scheduled', 'published', 'archived'],
    default: 'draft'
  },
  publishedAt: {
    type: Date
  },
  scheduledFor: {
    type: Date
  },
  
  // Automation fields
  automation: {
    isAutoGenerated: {
      type: Boolean,
      default: false
    },
    generationPrompt: {
      type: String
    },
    generationKeywords: [{
      type: String,
      trim: true
    }],
    generationDate: {
      type: Date
    },
    reviewStatus: {
      type: String,
      enum: ['pending', 'reviewed', 'approved', 'rejected'],
      default: 'pending'
    },
    reviewNotes: {
      type: String
    },
    reviewedBy: {
      type: mongoose.Schema.ObjectId,
      ref: 'User'
    },
    reviewedAt: {
      type: Date
    },
    emailPromoted: {
      type: Boolean,
      default: false
    },
    emailPromotionDate: {
      type: Date
    },
    emailCampaignId: {
      type: mongoose.Schema.ObjectId,
      ref: 'EmailCampaign'
    }
  },
  
  // Statistics
  stats: {
    views: {
      type: Number,
      default: 0
    },
    uniqueVisitors: {
      type: Number,
      default: 0
    },
    averageTimeOnPage: {
      type: Number,
      default: 0
    },
    bounceRate: {
      type: Number,
      default: 0
    },
    socialShares: {
      type: Number,
      default: 0
    },
    comments: {
      type: Number,
      default: 0
    }
  },
  
  // Author information
  author: {
    type: mongoose.Schema.ObjectId,
    ref: 'User'
  },
  
  // Revision history
  revisions: [{
    content: {
      type: String,
      required: true
    },
    updatedBy: {
      type: mongoose.Schema.ObjectId,
      ref: 'User'
    },
    updatedAt: {
      type: Date,
      default: Date.now
    },
    changeNotes: {
      type: String
    }
  }]
}, {
  timestamps: true
});

// Create slug from title before saving
BlogPostSchema.pre('save', function(next) {
  if (!this.isModified('title')) {
    return next();
  }
  
  this.slug = this.title
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/[\s_-]+/g, '-')
    .replace(/^-+|-+$/g, '');
  
  next();
});

// Add revision when content is updated
BlogPostSchema.pre('save', function(next) {
  if (this.isModified('content') && !this.isNew) {
    this.revisions.push({
      content: this.content,
      updatedBy: this.author,
      updatedAt: Date.now(),
      changeNotes: 'Content updated'
    });
  }
  
  next();
});

// Set published date when status changes to published
BlogPostSchema.pre('save', function(next) {
  if (this.isModified('status') && this.status === 'published' && !this.publishedAt) {
    this.publishedAt = Date.now();
  }
  
  next();
});

module.exports = mongoose.model('BlogPost', BlogPostSchema);
