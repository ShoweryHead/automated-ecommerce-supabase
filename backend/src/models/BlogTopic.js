const mongoose = require('mongoose');

const BlogTopicSchema = new mongoose.Schema({
  // Basic information
  title: {
    type: String,
    required: [true, 'Topic title is required'],
    trim: true,
    maxlength: [200, 'Title cannot be more than 200 characters']
  },
  description: {
    type: String,
    required: [true, 'Description is required'],
    trim: true,
    maxlength: [500, 'Description cannot be more than 500 characters']
  },
  
  // Content type
  contentType: {
    type: String,
    enum: ['product', 'industry_news', 'how_to', 'case_study'],
    required: [true, 'Content type is required']
  },
  
  // Keywords and research
  primaryKeyword: {
    type: String,
    required: [true, 'Primary keyword is required'],
    trim: true
  },
  secondaryKeywords: [{
    type: String,
    trim: true
  }],
  searchVolume: {
    type: Number,
    default: 0
  },
  keywordDifficulty: {
    type: Number,
    default: 0 // 0-100 scale
  },
  
  // Related entities
  relatedProducts: [{
    type: mongoose.Schema.ObjectId,
    ref: 'Product'
  }],
  relatedCategories: [{
    type: mongoose.Schema.ObjectId,
    ref: 'Category'
  }],
  
  // Status and workflow
  status: {
    type: String,
    enum: ['suggested', 'approved', 'rejected', 'in_progress', 'completed'],
    default: 'suggested'
  },
  priority: {
    type: Number,
    default: 5, // 1-10 scale, 10 being highest priority
    min: 1,
    max: 10
  },
  
  // Automation fields
  automation: {
    isAutoGenerated: {
      type: Boolean,
      default: false
    },
    generationMethod: {
      type: String,
      enum: ['product_based', 'trend_based', 'keyword_based', 'manual'],
      default: 'manual'
    },
    generationSource: {
      type: String,
      trim: true
    },
    generationDate: {
      type: Date
    },
    approvedBy: {
      type: mongoose.Schema.ObjectId,
      ref: 'User'
    },
    approvedAt: {
      type: Date
    },
    rejectionReason: {
      type: String
    }
  },
  
  // Content outline
  outline: {
    type: String
  },
  
  // Assignment and scheduling
  assignedTo: {
    type: mongoose.Schema.ObjectId,
    ref: 'User'
  },
  scheduledFor: {
    type: Date
  },
  deadline: {
    type: Date
  },
  
  // Resulting blog post (if created)
  blogPost: {
    type: mongoose.Schema.ObjectId,
    ref: 'BlogPost'
  },
  
  // Notes
  notes: {
    type: String
  }
}, {
  timestamps: true
});

module.exports = mongoose.model('BlogTopic', BlogTopicSchema);
